theme_bw()
cplplt + bicplt
# Load data from radiocarbon_mc.R: models fit for MC, the pd and the min and
# max ages
load(file = here::here("analysis/data/derived_data/shore_pd_models.RData"))
load(file = here::here("analysis/data/derived_data/shore_models.RData"))
expp <- convertPars(pars = exp$par, years = minage:maxage, type = 'exp')
expp$model <- "Exponential"
logip <- convertPars(pars = logi$par, years = minage:maxage, type = 'logistic')
logip$model <- "Logistic"
unifp <- convertPars(pars = NULL, years = minage:maxage, type = "uniform")
unifp$model <- "Uniform"
cpl1 <- convertPars(pars = cpl_1$par, years = minage:maxage, type = 'CPL')
cpl1$model <- "CPL-1"
cpl2 <- convertPars(pars = cpl_2$par, years = minage:maxage, type = 'CPL')
cpl2$model <- "CPL-2"
shmodels <- rbind(expp, logip, unifp, cpl1, cpl2)
sh_lik <- c("Exponential" = -exp$value,
"Logistic" = -logi$value,
"Uniform" = unif,
"CPL-1" = -cpl_1$value,
"CPL-2" = -cpl_2$value)
col(pd)
ncol(pd)
sseize <- ncol(pd)
ssize <- ncol(pd)
rcarbon_bic <- c(log(ssize)*1 - 2*sh_lik[1], # Exponential
log(ssize)*2 - 2*sh_lik[2], # Logistic
log(ssize)*0  - 2*sh_lik[3], # Uniform
log(ssize)*1 - 2*sh_lik[4], # CPL-1
log(ssize)*3 - 2*sh_lik[5]) # CPL-2
sh_bic <- c(log(ssize)*1 - 2*sh_lik[1], # Exponential
log(ssize)*2 - 2*sh_lik[2], # Logistic
log(ssize)*0  - 2*sh_lik[3], # Uniform
log(ssize)*1 - 2*sh_lik[4], # CPL-1
log(ssize)*3 - 2*sh_lik[5]) # CPL-2
SPD <- as.data.frame(rowSums(pd))
SPD <- SPD/( sum(SPD) *5 )
ggplot() +
geom_bar(aes(x = (as.numeric(rownames(SPD)) - 2000) * -1,
SPD[,1] / sum(SPD[,1])),
stat = "identity", col = "grey") +
geom_line(aes(x = (as.numeric(rownames(SPD)) - 2000) * -1,
y = SPD[,1] / sum(SPD[,1]))) +
geom_line(data = shmodels, aes((year - 2000) * -1, pdf, col = model),
linewidth = 1.1) +
labs(x = "BCE", y = "Summed probability") +
# scale_x_continuous(limit = c(-10000, -2750)) +
# scale_y_continuous(limit = c(0, 0.001)) +
theme_bw() +
theme(legend.title = element_blank())
ggplot() +
geom_point(aes(sh_bic, names(sh_bic)), size = 3) +
labs(x = "BIC", y = "Model") +
theme_bw()
SPD <- as.data.frame(rowSums(pd))
ggplot() +
geom_bar(aes(x = (as.numeric(rownames(SPD)) - 2000) * -1,
SPD[,1] / sum(SPD[,1])),
stat = "identity", col = "grey") +
geom_line(aes(x = (as.numeric(rownames(SPD)) - 2000) * -1,
y = SPD[,1] / sum(SPD[,1]))) +
geom_line(data = shmodels, aes((year - 2000) * -1, pdf, col = model),
linewidth = 1.1) +
labs(x = "BCE", y = "Summed probability") +
# scale_x_continuous(limit = c(-10000, -2750)) +
# scale_y_continuous(limit = c(0, 0.001)) +
theme_bw() +
theme(legend.title = element_blank())
ggplot() +
geom_bar(aes(x = as.numeric(rownames(SPD)), SPD[,1]),
stat = "identity", col = "grey") +
geom_line(aes(x = as.numeric(rownames(SPD)),
y = SPD[,1])) +
geom_line(data = shoremodels, aes(year, pdf, col = model),
linewidth = 1.1)
library(ggplot2)
library(shoredate)
library(dplyr)
library(sf)
library(here)
library(patchwork)
library(ADMUR)
library(DEoptimR)
set.seed(42)
# Source functions
source(here("R/03_functions.R"))
# Load combined sites
sites <- st_read(here("analysis/data/derived_data/combined_sites.gpkg"))
# Load polygons with displacement curves
load(here("analysis/data/derived_data/displacement_polygons.RData"))
# Load shoreline dates
load(here("analysis/data/derived_data/sdates.RData"))
dates_dfs <- lapply(shorelinedates, as.data.frame)
# Combine these into a single data frame
sdates <- do.call(rbind, dates_dfs)
# Assign simulation results for each site a unique ID
sdates$site <- rep(1:length(dates_dfs) , each = nrow(sdates)/length(dates_dfs))
pd <- as.data.frame(sdates) %>%
dplyr::filter(bce <= -2500 & bce >= -9445) %>%
dplyr::group_by(bce) %>%
dplyr::filter(!is.na(probability)) %>%
dplyr::group_by(site) %>%
tidyr::pivot_wider(names_from = site, values_from = probability) %>%
tibble::column_to_rownames("bce")
pd <- sweep(pd, 2, colSums(pd),"/")
SPD <- as.data.frame(rowSums(pd))
SPD <- SPD/( sum(SPD) *5 )
minage <- min(as.numeric(row.names(SPD)))
maxage <- max(as.numeric(row.names(SPD)))
# Combine models for plotting
shoremodels <- rbind(expp, logip, unifp)
ggplot() +
geom_bar(aes(x = as.numeric(rownames(SPD)), SPD[,1]),
stat = "identity", col = "grey") +
geom_line(aes(x = as.numeric(rownames(SPD)),
y = SPD[,1])) +
geom_line(data = shoremodels, aes(year, pdf, col = model),
linewidth = 1.1)
ggplot() +
# geom_bar(aes(x = (as.numeric(rownames(SPD)) - 2000) * -1,
#              SPD[,1] / sum(SPD[,1])),
#          stat = "identity", col = "grey") +
# geom_line(aes(x = (as.numeric(rownames(SPD)) - 2000) * -1,
#               y = SPD[,1] / sum(SPD[,1]))) +
geom_bar(aes(x = as.numeric(rownames(SPD)), SPD[,1]),
stat = "identity", col = "grey") +
geom_line(aes(x = as.numeric(rownames(SPD)),
y = SPD[,1])) +
geom_line(data = shmodels, aes((year - 2000) * -1, pdf, col = model),
linewidth = 1.1) +
labs(x = "BCE", y = "Summed probability") +
# scale_x_continuous(limit = c(-10000, -2750)) +
# scale_y_continuous(limit = c(0, 0.001)) +
theme_bw() +
theme(legend.title = element_blank())
ggplot() +
# geom_bar(aes(x = (as.numeric(rownames(SPD)) - 2000) * -1,
#              SPD[,1] / sum(SPD[,1])),
#          stat = "identity", col = "grey") +
# geom_line(aes(x = (as.numeric(rownames(SPD)) - 2000) * -1,
#               y = SPD[,1] / sum(SPD[,1]))) +
geom_bar(aes(x = (as.numeric(rownames(SPD)) - 2000) * -1, SPD[,1]),
stat = "identity", col = "grey") +
geom_line(aes(x = (as.numeric(rownames(SPD)) - 2000) * -1,
y = SPD[,1])) +
geom_line(data = shmodels, aes((year - 2000) * -1, pdf, col = model),
linewidth = 1.1) +
labs(x = "BCE", y = "Summed probability") +
# scale_x_continuous(limit = c(-10000, -2750)) +
# scale_y_continuous(limit = c(0, 0.001)) +
theme_bw() +
theme(legend.title = element_blank())
library(ADMUR)
library(DEoptimR)
set.seed(42)
# Load data from radiocarbon_mc.R: models fit for MC, the pd and the min and
# max ages
load(file = here::here("analysis/data/derived_data/shore_pd_models.RData"))
load(file = here::here("analysis/data/derived_data/shore_models.RData"))
expp <- convertPars(pars = exp$par, years = minage:maxage, type = 'exp')
expp$model <- "Exponential"
logip <- convertPars(pars = logi$par, years = minage:maxage, type = 'logistic')
logip$model <- "Logistic"
unifp <- convertPars(pars = NULL, years = minage:maxage, type = "uniform")
unifp$model <- "Uniform"
cpl1 <- convertPars(pars = cpl_1$par, years = minage:maxage, type = 'CPL')
cpl1$model <- "CPL-1"
cpl2 <- convertPars(pars = cpl_2$par, years = minage:maxage, type = 'CPL')
cpl2$model <- "CPL-2"
shmodels <- rbind(expp, logip, unifp, cpl1, cpl2)
sh_lik <- c("Exponential" = -exp$value,
"Logistic" = -logi$value,
"Uniform" = unif,
"CPL-1" = -cpl_1$value,
"CPL-2" = -cpl_2$value)
ssize <- ncol(pd)
sh_bic <- c(log(ssize)*1 - 2*sh_lik[1], # Exponential
log(ssize)*2 - 2*sh_lik[2], # Logistic
log(ssize)*0  - 2*sh_lik[3], # Uniform
log(ssize)*1 - 2*sh_lik[4], # CPL-1
log(ssize)*3 - 2*sh_lik[5]) # CPL-2
SPD <- as.data.frame(rowSums(pd))
SPD <- SPD/( sum(SPD) *5 )
ggplot() +
# geom_bar(aes(x = (as.numeric(rownames(SPD)) - 2000) * -1,
#              SPD[,1] / sum(SPD[,1])),
#          stat = "identity", col = "grey") +
# geom_line(aes(x = (as.numeric(rownames(SPD)) - 2000) * -1,
#               y = SPD[,1] / sum(SPD[,1]))) +
geom_bar(aes(x = (as.numeric(rownames(SPD)) - 2000) * -1, SPD[,1]),
stat = "identity", col = "grey") +
geom_line(aes(x = (as.numeric(rownames(SPD)) - 2000) * -1,
y = SPD[,1])) +
geom_line(data = shmodels, aes((year - 2000) * -1, pdf, col = model),
linewidth = 1.1) +
labs(x = "BCE", y = "Summed probability") +
# scale_x_continuous(limit = c(-10000, -2750)) +
# scale_y_continuous(limit = c(0, 0.001)) +
theme_bw() +
theme(legend.title = element_blank())
ggplot() +
geom_bar(aes(x = (as.numeric(rownames(SPD)) - 2000) * -1,
SPD[,1]),
stat = "identity", col = "grey") +
geom_line(aes(x = (as.numeric(rownames(SPD)) - 2000) * -1,
y = SPD[,1])) +
# geom_bar(aes(x = (as.numeric(rownames(SPD)) - 2000) * -1, SPD[,1]),
#          stat = "identity", col = "grey") +
# geom_line(aes(x = (as.numeric(rownames(SPD)) - 2000) * -1,
#               y = SPD[,1])) +
geom_line(data = shmodels, aes((year - 2000) * -1, pdf, col = model),
linewidth = 1.1) +
labs(x = "BCE", y = "Summed probability") +
# scale_x_continuous(limit = c(-10000, -2750)) +
# scale_y_continuous(limit = c(0, 0.001)) +
theme_bw() +
theme(legend.title = element_blank())
-logi$value
unique(shmodels$model)
ggplot() +  geom_line(data = shmodels, aes((year - 2000) * -1, pdf, col = model),
linewidth = 1.1)
ggplot() +  geom_line(data = shmodels[shmodels$model == "Logistic"], aes((year - 2000) * -1, pdf, col = model),
linewidth = 1.1)
ggplot() +  geom_line(data = shmodels[shmodels$model == "Logistic",], aes((year - 2000) * -1, pdf, col = model),
linewidth = 1.1)
ggplot() +  geom_line(data = shmodels[shmodels$model == "Logistic"], aes((year - 2000) * -1, pdf, col = model),
linewidth = 1.1)
ggplot() +  geom_line(data = shmodels[shmodels$model == "Logistic"], aes((year - 2000) * -1, pdf, col = model),
linewidth = 1.1)
# Call to plot
ggplot() +
geom_bar(aes(x = as.numeric(rownames(SPD)), SPD[,1]),
stat = "identity", col = "grey") +
geom_line(aes(x = as.numeric(rownames(SPD)),
y = SPD[,1])) +
geom_line(data = shoremodels, aes(year, pdf, col = model),
linewidth = 1.1)
logip <- convertPars(pars = logi$par, years = minage:maxage, type = 'logistic')
logip$model <- "Logistic"
# Combine models for plotting
shoremodels <- rbind(expp, logip, unifp)
# Call to plot
ggplot() +
geom_bar(aes(x = as.numeric(rownames(SPD)), SPD[,1]),
stat = "identity", col = "grey") +
geom_line(aes(x = as.numeric(rownames(SPD)),
y = SPD[,1])) +
geom_line(data = shoremodels, aes(year, pdf, col = model),
linewidth = 1.1)
logi
library(shoredate)
centrepoints <- sf::st_read(
system.file("extdata/isobase_centrepts.gpkg",
package = "shoredate",
mustWork = TRUE), quiet = TRUE)
porsgrunn <- centrepoints[2,]
porsgrunn$name <- "Eksempel 68 masl"
elevations <- seq(150, 20, -2)
sites <- sf::st_sf(rep(sf::st_geometry(porsgrunn), length(elevations)))
sites$name <- paste(elevations, "masl")
ssdates <- shoreline_date(sites,
elevation = elevations,
hdr_prob = 1,
model = "none")
shoredate_plot(ssdates, date_probability = FALSE, multiplot = TRUE)
centrepoints[1,]
sites <- sf::st_sf(rep(sf::st_geometry(horten), length(elevations)))
sites$name <- paste(elevations, "masl")
hsdates <- shoreline_date(sites,
elevation = elevations,
hdr_prob = 1,
model = "none")
horten <- centrepoints[1,]
horten$name <- "Horten"
sites <- sf::st_sf(rep(sf::st_geometry(horten), length(elevations)))
sites$name <- paste(elevations, "masl")
hsdates <- shoreline_date(sites,
elevation = elevations,
hdr_prob = 1,
model = "none")
shoredate_plot(hsdates, date_probability = FALSE, multiplot = TRUE)
centrepoints[3,]
arendal <- centrepoints[3,]
arendal$name <- "Horten"
arendal <- centrepoints[3,]
arendal$name <- "Horten"
sites <- sf::st_sf(rep(sf::st_geometry(arendal), length(elevations)))
sites$name <- paste(elevations, "masl")
asdates <- shoreline_date(sites,
elevation = elevations,
hdr_prob = 1,
model = "none")
shoredate_plot(asdates, date_probability = FALSE, multiplot = TRUE)
tvedestrand <- centrepoints[4,]
tvedestrand$name <- "Tvedestrand"
sites <- sf::st_sf(rep(sf::st_geometry(tvedestrand), length(elevations)))
sites$name <- paste(elevations, "masl")
tsdates <- shoreline_date(sites,
elevation = elevations,
hdr_prob = 1,
model = "none")
porsgrunn <- centrepoints[2,]
porsgrunn$name <- "Eksempel 68 masl"
elevations <- seq(150, 20, -1)
sites <- sf::st_sf(rep(sf::st_geometry(porsgrunn), length(elevations)))
sites$name <- paste(elevations, "masl")
psdates <- shoreline_date(sites,
elevation = elevations,
hdr_prob = 1,
model = "none")
horten <- centrepoints[1,]
horten$name <- "Horten"
sites <- sf::st_sf(rep(sf::st_geometry(horten), length(elevations)))
sites$name <- paste(elevations, "masl")
hsdates <- shoreline_date(sites,
elevation = elevations,
hdr_prob = 1,
model = "none")
arendal <- centrepoints[3,]
arendal$name <- "Arendal"
sites <- sf::st_sf(rep(sf::st_geometry(arendal), length(elevations)))
sites$name <- paste(elevations, "masl")
asdates <- shoreline_date(sites,
elevation = elevations,
hdr_prob = 1,
model = "none")
tvedestrand <- centrepoints[4,]
tvedestrand$name <- "Tvedestrand"
sites <- sf::st_sf(rep(sf::st_geometry(tvedestrand), length(elevations)))
sites$name <- paste(elevations, "masl")
tsdates <- shoreline_date(sites,
elevation = elevations,
hdr_prob = 1,
model = "none")
shoredate_plot(asdates, date_probability = FALSE, multiplot = TRUE)
exdate <-  shoreline_date(sites = porsgrunn,
hdr_prob = 1,
elevation = 68,
model = "none")
prange <- c()
for(i in 1:length(psdates)){
tmp <- psdates[[i]][[1]]$hdr_end - psdates[[i]][[1]]$hdr_start
prange <- c(prange, tmp)
}
hrange <- c()
for(i in 1:length(hsdates)){
tmp <- hsdates[[i]][[1]]$hdr_end - hsdates[[i]][[1]]$hdr_start
hrange <- c(hrange, tmp)
}
arange <- c()
for(i in 1:length(asdates)){
tmp <- asdates[[i]][[1]]$hdr_end - asdates[[i]][[1]]$hdr_start
arange <- c(arange, tmp)
}
trange <- c()
for(i in 1:length(tsdates)){
tmp <- tsdates[[i]][[1]]$hdr_end - tsdates[[i]][[1]]$hdr_start
trange <- c(trange, tmp)
}
trange
tsdates
c(prange, hrange)
mean(c(prange, hrange, arange, trange), na.rm = TRUE)
?sd
sd(c(prange, hrange, arange, trange), na.rm = TRUE)
library(shoredate)
# Load centre points for the displacement curves
centrepoints <- sf::st_read(
system.file("extdata/isobase_centrepts.gpkg",
package = "shoredate",
mustWork = TRUE), quiet = TRUE)
# Retreieve the point on the Horten isobase
horten <- centrepoints[1,]
# Create a sequence of eleveation values from well above the marine limit for
# the curves and down to 20 masl
elevations <- seq(190, 20, -1)
# Make these a series of "sites" to be dated
sites <- sf::st_sf(rep(sf::st_geometry(horten), length(elevations)))
sites$name <- paste(elevations, "masl")
# Perform dating procedure, setting model to "none" and HDR to 1 to account for
# the full range.
hsdates <- shoreline_date(sites,
elevation = elevations,
hdr_prob = 1,
model = "none")
# Porsgrunn curve
porsgrunn <- centrepoints[2,]
sites <- sf::st_sf(rep(sf::st_geometry(porsgrunn), length(elevations)))
sites$name <- paste(elevations, "masl")
psdates <- shoreline_date(sites,
elevation = elevations,
hdr_prob = 1,
model = "none")
# Arendal curve
arendal <- centrepoints[3,]
sites <- sf::st_sf(rep(sf::st_geometry(arendal), length(elevations)))
sites$name <- paste(elevations, "masl")
asdates <- shoreline_date(sites,
elevation = elevations,
hdr_prob = 1,
model = "none")
shoredate_plot(asdates, date_probability = FALSE, multiplot = TRUE)
# Tvedestrand curve
tvedestrand <- centrepoints[4,]
sites <- sf::st_sf(rep(sf::st_geometry(tvedestrand), length(elevations)))
sites$name <- paste(elevations, "masl")
tsdates <- shoreline_date(sites,
elevation = elevations,
hdr_prob = 1,
model = "none")
shoredate_plot(tsdates, date_probability = FALSE, multiplot = TRUE)
# Find the date ranges
prange <- c()
for(i in 1:length(psdates)){
tmp <- psdates[[i]][[1]]$hdr_end - psdates[[i]][[1]]$hdr_start
prange <- c(prange, tmp)
}
hrange <- c()
for(i in 1:length(hsdates)){
tmp <- hsdates[[i]][[1]]$hdr_end - hsdates[[i]][[1]]$hdr_start
hrange <- c(hrange, tmp)
}
arange <- c()
for(i in 1:length(asdates)){
tmp <- asdates[[i]][[1]]$hdr_end - asdates[[i]][[1]]$hdr_start
arange <- c(arange, tmp)
}
trange <- c()
for(i in 1:length(tsdates)){
tmp <- tsdates[[i]][[1]]$hdr_end - tsdates[[i]][[1]]$hdr_start
trange <- c(trange, tmp)
}
# Find the mean and standard deviation across all date ranges
mean(c(prange, hrange, arange, trange), na.rm = TRUE)
sd(c(prange, hrange, arange, trange), na.rm = TRUE)
# Retreieve the point on the Horten isobase
horten <- centrepoints[1,]
# Create a sequence of eleveation values from well above the marine limit for
# the curves and down to 20 masl
elevations <- seq(190, 1, -1)
# Make these a series of "sites" to be dated
sites <- sf::st_sf(rep(sf::st_geometry(horten), length(elevations)))
sites$name <- paste(elevations, "masl")
# Perform dating procedure, setting model to "none" and HDR to 1 to account for
# the full range.
hsdates <- shoreline_date(sites,
elevation = elevations,
hdr_prob = 1,
model = "none")
# Porsgrunn curve
porsgrunn <- centrepoints[2,]
sites <- sf::st_sf(rep(sf::st_geometry(porsgrunn), length(elevations)))
sites$name <- paste(elevations, "masl")
psdates <- shoreline_date(sites,
elevation = elevations,
hdr_prob = 1,
model = "none")
# Arendal curve
arendal <- centrepoints[3,]
sites <- sf::st_sf(rep(sf::st_geometry(arendal), length(elevations)))
sites$name <- paste(elevations, "masl")
asdates <- shoreline_date(sites,
elevation = elevations,
hdr_prob = 1,
model = "none")
shoredate_plot(asdates, date_probability = FALSE, multiplot = TRUE)
# Tvedestrand curve
tvedestrand <- centrepoints[4,]
sites <- sf::st_sf(rep(sf::st_geometry(tvedestrand), length(elevations)))
sites$name <- paste(elevations, "masl")
tsdates <- shoreline_date(sites,
elevation = elevations,
hdr_prob = 1,
model = "none")
shoredate_plot(tsdates, date_probability = FALSE, multiplot = TRUE)
# Find the date ranges
prange <- c()
for(i in 1:length(psdates)){
tmp <- psdates[[i]][[1]]$hdr_end - psdates[[i]][[1]]$hdr_start
prange <- c(prange, tmp)
}
hrange <- c()
for(i in 1:length(hsdates)){
tmp <- hsdates[[i]][[1]]$hdr_end - hsdates[[i]][[1]]$hdr_start
hrange <- c(hrange, tmp)
}
arange <- c()
for(i in 1:length(asdates)){
tmp <- asdates[[i]][[1]]$hdr_end - asdates[[i]][[1]]$hdr_start
arange <- c(arange, tmp)
}
trange <- c()
for(i in 1:length(tsdates)){
tmp <- tsdates[[i]][[1]]$hdr_end - tsdates[[i]][[1]]$hdr_start
trange <- c(trange, tmp)
}
# Find the mean and standard deviation across all date ranges
mean(c(prange, hrange, arange, trange), na.rm = TRUE)
sd(c(prange, hrange, arange, trange), na.rm = TRUE)
# Find the mean and standard deviation across all date ranges
dispmean <- mean(c(prange, hrange, arange, trange), na.rm = TRUE)
dispsd <- sd(c(prange, hrange, arange, trange), na.rm = TRUE)
# save results
save(dispmean, dispsd, file = here("analysis/data/derived_data/disp_tpq_ranges.RData"))
# Find the mean and standard deviation across all date ranges
tpqmean <- mean(c(prange, hrange, arange, trange), na.rm = TRUE)
tpqsd <- sd(c(prange, hrange, arange, trange), na.rm = TRUE)
# save results
save(tpqmean, tpqsd,
file = here("analysis/data/derived_data/disp_tpq_ranges.RData"))
minage
