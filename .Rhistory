start = list(a = 0, b = 0))
est <- predict(fit, list(x = sumdatesdf$sum.bce))
predgrid <- data.frame(bce = sumdatesdf$sum.bce, prob_dens = est)
shoredate_sumplot(sumdates)  +
geom_line(data = predgrid, aes(x = bce, y = prob_dens)) +
scale_x_continuous(breaks = seq(-10000, 2500, 500)) +
theme_classic()
sumdates <- sum_shoredates(shorelinedates, cut_off_level = 0.9)
sumdatesdf <- as.data.frame(sumdates)
# Code repurposed from modelTest() from rcarbon
fit <- nls(y ~ (exp(a + b * x)),
data = data.frame(x = sumdatesdf$sum.bce, y = sumdatesdf$sum.probability),
start = list(a = 0, b = 0))
est <- predict(fit, list(x = sumdatesdf$sum.bce))
predgrid <- data.frame(bce = sumdatesdf$sum.bce, prob_dens = est)
shoredate_sumplot(sumdates)  +
geom_line(data = predgrid, aes(x = bce, y = prob_dens)) +
scale_x_continuous(breaks = seq(-10000, 2500, 500)) +
theme_classic()
sumdates <- sum_shoredates(shorelinedates)
sumdatesdf <- as.data.frame(sumdates)
# Code repurposed from modelTest() from rcarbon
fit <- nls(y ~ (exp(a + b * x)),
data = data.frame(x = sumdatesdf$sum.bce, y = sumdatesdf$sum.probability),
start = list(a = 0, b = 0))
est <- predict(fit, list(x = sumdatesdf$sum.bce))
predgrid <- data.frame(bce = sumdatesdf$sum.bce, prob_dens = est)
shoredate_sumplot(sumdates)  +
geom_line(data = predgrid, aes(x = bce, y = prob_dens)) +
scale_x_continuous(breaks = seq(-10000, 2500, 500)) +
theme_classic()
shoredate_sumplot(sumdates)  +
geom_line(data = predgrid, aes(x = bce, y = prob_dens)) +
scale_x_continuous(breaks = seq(-10000, 2500, 1000)) +
theme_classic()
plot(st_geometry(sites))
load(here("analysis/data/derived_data/incpolys.RData"))
library(tidyverse)
library(sf)
library(terra)
library(here)
library(shoredate)
# For reproducibility
set.seed(1)
# Load data
surveyed <- st_read(here("analysis/data/raw_data/surveyed_sites.gpkg"))
excavated <- st_zm(read_sf(here("analysis/data/raw_data/excavated_sites.gpkg")))
dtm <- rast("/home/isak/phd/eaa_presentation/dtm10/dtm10.tif")
site_dat <- read.csv(here("analysis/data/raw_data/sites.csv"))
###### Prepare site data for shoreline dating ######
# Exclude sites that haven't been excavated and which haven't been shoreline
# dated
shore_sites <- site_dat %>% dplyr::filter(investigated == "t") %>%
dplyr::filter(dating_method == "shore_typo" & !is.na(reported_earliest_bce)
& !is.na(reported_min_elev))
# Join shoreline dated excavated sites with the spatial data for the sites
excshore <- st_as_sf(
dplyr::left_join(shore_sites, excavated,
by = c("name" = "site_name", "ask_id"))
) %>%
dplyr::filter(!(is.na(st_dimension(geom))))
# Find mean reported elevation for the excavated sites
excshore$elev <- rowMeans(subset(st_drop_geometry(excshore),
select = c(reported_min_elev,
reported_max_elev)))
# Find elevation of surveyed sites
surveyed$elev <- terra::extract(dtm, vect(surveyed), fun = mean)[, -1]
# Exclude surveyed sites with a quality score worse than 3
survq <- dplyr::filter(surveyed, quality < 4)
#
# surveyed <- surveyed %>% dplyr::mutate(lab = ifelse(quality < 4, "t", "f"))
# excavated$lab <- "y"
# Select and rename columns needed to perform shoreline dating
rcolexcshore <- excshore %>% dplyr::select(ask_id, elev)
rcolsurvq <- survq  %>% dplyr::select(askeladden_id, elev) %>%
dplyr::rename(ask_id = askeladden_id)
# Combine the data
sites <-rbind(rcolexcshore, rcolsurvq)
class(sites)
st_write(sites, here("analysis/data/derived_data/combined_sites.gpkg"))
load(here("analysis/data/raw_data/displacement_data.RData"))
sites <- st_read(here("analysis/data/derived_data/combined_sites.gpkg"))
# Specify distance of increments for which to interpolate displacement curve
increment <- 2000
# Degree direction of isobases
deg <- 327
# Arbritrary long distance for lines
linedist <- 100000
# Find bounding box of sites adding 1km
outcoords <- st_bbox(sites) + 1000
# Find bottom left and top right points
startpt <- st_point(outcoords[1:2])
endpt <- st_point(outcoords[3:4])
xx <- startpt[1] + (linedist/3) * (cos(deg * pi / 180))
yy <- startpt[2] + (linedist/3) * (sin(deg * pi / 180))
xx2 <- startpt[1] - (linedist/3) * (cos(deg * pi / 180))
yy2 <- startpt[2] - (linedist/3) * (sin(deg * pi / 180))
startline <- st_cast(c(st_point(c(xx,yy)),  st_point(c(xx2,yy2))), "LINESTRING")
xx <- endpt[1] + (linedist/3) * (cos(deg * pi / 180))
yy <- endpt[2] + (linedist/3) * (sin(deg * pi / 180))
xx2 <- endpt[1] - (linedist/3) * (cos(deg * pi / 180))
yy2 <- endpt[2] - (linedist/3) * (sin(deg * pi / 180))
endline <- st_cast(c(st_point(c(xx,yy)),  st_point(c(xx2,yy2))), "LINESTRING")
# Find line between closest points on the two lines
perpline <- st_nearest_points(startline, endline)
# Find number of increments given the distance between the lines and a set
# increment (5km)
ninc <- round(st_length(perpline)/increment)
# Create ninc number of points at regular intervals along this line
incpts <- st_line_sample(perpline, ninc) %>%
st_sfc() %>%
st_set_crs(32632) %>%
st_cast("POINT")
# Object to hold lines
inclines <- st_sfc() %>%  st_set_crs(32632)
# Loop over points
for (i in 1:length(incpts)){
# Find x and y coords
x <- st_coordinates(incpts[i])[1]
y <- st_coordinates(incpts[i])[2]
# Find coords at the specified distance from the point at deg degree angle
xx <- x + linedist * (cos(deg * pi / 180))
yy <- y + linedist * (sin(deg * pi / 180))
xx2 <- x - linedist * (cos(deg * pi / 180))
yy2 <- y - linedist * (sin(deg * pi / 180))
pts <- st_sfc(st_multipoint(rbind(c(xx, yy), c(xx2, yy2)))) %>%
st_set_crs(32632) %>% # WGS 84 / UTM 32N
st_sf()
inclines <- rbind(st_cast(pts, "LINESTRING"), inclines)
# assign(paste0("increment", i), st_cast(pts, to = 'LINESTRING'))
}
plot(inclines)
# plot(c(startpt, endpt), add = TRUE)
plot(st_centroid(sites), pch = 19, cex = 0.5, colour = "black", add = TRUE)
incpolys <- st_sfc() %>%  st_set_crs(32632)
for(i in 1:(nrow(inclines) - 1)){
s1 <- st_cast(inclines[i,], "POINT")[1,]
e1 <- st_cast(inclines[i,], "POINT")[2,]
s2 <- st_cast(inclines[i + 1,], "POINT")[1,]
e2 <- st_cast(inclines[i + 1,], "POINT")[2,]
st_cast(rbind(inclines[i,], inclines[i+1,]), "LINESTRING")
pol <- rbind(s1, s2, e2, e1) %>%
summarise(do_union = FALSE) %>%
st_cast("POLYGON")
incpolys <- rbind(pol, incpolys)
}
#  Find centroids of polygons
inccents <- st_centroid(incpolys)
inccents$id <- seq(1, nrow(inccents))
incpolys$disp <- NA
incpolys$id <- seq(1, nrow(incpolys))
# Interpolate displacement curves to centroids, assigning the curve
# to the polygon feature
for(i in 1:nrow(incpolys)){
incpolys[i,]$disp <- list(shoredate::interpolate_curve(target = inccents[i,],
cal_reso = 5))
}
class(incpolys)
st_write(incpolys,
here("analysis/data/derived_data/displacement_polygons.gpkg"))
save(incpolys,
here("analysis/data/derived_data/displacement_polygons.RData"))
here()
save(incpolys,
file = here("analysis/data/derived_data/displacement_polygons.RData"))
ggplot() +
geom_sf(data = incpolys, aes(col = id)) +
# geom_sf(data = inccents, aes(col = id)) +
geom_sf(data = st_centroid(sites), pch = 21, fill = "red") +
theme_classic()
plot(x = incpolys[1,]$disp[[1]][[1]]$bce,
y = incpolys[1,]$disp[[1]][[1]]$lowerelev,
type = "l", col = cols[1])
incpolys[1,]$disp
incpolys[1,]$disp[[1]][[1]]
incpolys[1,]$disp[[1]][[1]]$bce
plot(x = incpolys[1,]$disp[[1]][[1]]$bce,
y = incpolys[1,]$disp[[1]][[1]]$lowerelev,
type = "l", col = cols[1])
incpolys[1,]$disp[[1]][[1]]$lowerelev
color = grDevices::colors()[grep('gr(a|e)y', grDevices::colors(), invert = T)]
cols <- sample(color, nrow(incpolys))
plot(x = incpolys[1,]$disp[[1]][[1]]$bce,
y = incpolys[1,]$disp[[1]][[1]]$lowerelev,
type = "l", col = cols[1])
lines(incpolys[1,]$disp[[1]][[1]]$bce,
incpolys[1,]$disp[[1]][[1]]$upperelev, col = cols[1])
for(i in 2:nrow(incpolys)){
lines(x = incpolys[i,]$disp[[1]][[1]]$bce,
y = incpolys[i,]$disp[[1]][[1]]$lowerelev,
type = "l", col = cols[i])
lines(incpolys[i,]$disp[[1]][[1]]$bce,
incpolys[i,]$disp[[1]][[1]]$upperelev, col = cols[i])
}
# Load
load(here("analysis/data/derived_data/displacement_polygons.RData"))
# Find density of site across polygons
incpolys$dens <- lengths(st_intersects(incpolys, sites)) /
sum(lengths(st_intersects(incpolys, sites)))
sumdates
sumdates$dates_n
# Sample size
ssize = sumdates$dates_n
nsim <- 100
# Data frame for simulated dates
random_dates <- data.frame(matrix(nrow = ssize*nsim, ncol = 3))
names(random_dates) <- c("sample", "simn", "displacement_curve")
random_dates$sample = sample(predgrid$bce, replace = TRUE,
size = ssize*nsim, prob = predgrid$prob_dens)
random_dates$simn <- rep(1:nsim, each = nrow(random_dates)/nsim)
random_dates$displacement_curve <- incpolys[sample(incpolys$id, replace = TRUE,
size = ssize*nsim,
prob = incpolys$dens),]$disp[[1]]
# Source functions
source(here("R/03_functions.R"))
# Reverse shoreline date using reverse_shoredate from 03_functions.R
random_dates$reverse_elevation <- mapply(reverse_shoredate,
random_dates$sample,
random_dates$displacement_curve)
###### Shoreline dating ######
step_reso = 0.1
step_reso
# Reverse shoreline date using reverse_shoredate from 03_functions.R
random_dates$reverse_elevation <- mapply(reverse_shoredate,
random_dates$sample,
random_dates$displacement_curve,
step_reso)
# Number of simulations
nsim <- 10
# Data frame for simulated dates
random_dates <- data.frame(matrix(nrow = ssize*nsim, ncol = 3))
names(random_dates) <- c("sample", "simn", "displacement_curve")
random_dates$sample = sample(predgrid$bce, replace = TRUE,
size = ssize*nsim, prob = predgrid$prob_dens)
random_dates$simn <- rep(1:nsim, each = nrow(random_dates)/nsim)
random_dates$displacement_curve <- incpolys[sample(incpolys$id, replace = TRUE,
size = ssize*nsim,
prob = incpolys$dens),]$disp[[1]]
# Reverse shoreline date using reverse_shoredate from 03_functions.R
random_dates$reverse_elevation <- mapply(reverse_shoredate,
random_dates$sample,
random_dates$displacement_curve,
step_reso)
# Number of simulations
nsim <- 10
# Data frame for simulated dates
random_dates <- data.frame(matrix(nrow = ssize*nsim, ncol = 3))
names(random_dates) <- c("sample", "simn", "displacement_curve")
random_dates$sample = sample(predgrid$bce, replace = TRUE,
size = ssize*nsim, prob = predgrid$prob_dens)
random_dates$simn <- rep(1:nsim, each = nrow(random_dates)/nsim)
random_dates$displacement_curve <- incpolys[sample(incpolys$id, replace = TRUE,
size = ssize*nsim,
prob = incpolys$dens),]$disp[[1]]
# Reverse shoreline date using reverse_shoredate from 03_functions.R
random_dates$reverse_elevation <- mapply(reverse_shoredate,
random_dates$sample,
random_dates$displacement_curve,
step_reso)
simdates <- list()
start_time <- Sys.time()
# Number of simulations
nsim <- 10
# Data frame for simulated dates
random_dates <- data.frame(matrix(nrow = ssize*nsim, ncol = 3))
names(random_dates) <- c("sample", "simn", "displacement_curve")
random_dates$sample = sample(predgrid$bce, replace = TRUE,
size = ssize*nsim, prob = predgrid$prob_dens)
random_dates$simn <- rep(1:nsim, each = nrow(random_dates)/nsim)
random_dates$displacement_curve <- incpolys[sample(incpolys$id, replace = TRUE,
size = ssize*nsim,
prob = incpolys$dens),]$disp[[1]]
# Reverse shoreline date using reverse_shoredate from 03_functions.R
random_dates$reverse_elevation <- mapply(reverse_shoredate,
random_dates$sample,
random_dates$displacement_curve,
step_reso)
simdates <- list()
start_time <- Sys.time()
for (i in 1:nrow(random_dates)){
print(paste(i, "/", nrow(random_dates)))
simdates[[i]] <- shoredate::shoreline_date(
site = random_dates$simn[i],
elev_reso = step_reso,
cal_reso = 5,
elevation = random_dates$reverse_elevation[i],
interpolated_curve = random_dates$displacement_curve[i],
sparse = TRUE)
if(i %% ssize == 0){
# Save data externally and overwrite simdates for memory purposes
tmp <- bind_rows(simdates) %>% group_by(bce, site_name) %>%
filter(!is.na(probability)) %>%
summarise(prob_sum = sum(probability))
save(tmp,
file = paste0(here::here("../external_data/shorespd/exp/"),
i, "shore.rds"))
simdates <- list()
}
}
end_time <- Sys.time()
end_time - start_time
?shoreline_date
random_dates$simn[i]
remove.packages("shoredate")
devtools::install_github("isakro/shoredate")
??stackspd
library(shoredate)
# Load shoreline dates
load(here("analysis/data/derived_data/sdates.RData"))
# Sum the probability distributions for the shoreline dates
sumdates <- sum_shoredates(shorelinedates)
# Make the results a data frame
sumdatesdf <- as.data.frame(sumdates)
# Fit exponential model
fit <- nls(y ~ (exp(a + b * x)),
data = data.frame(x = sumdatesdf$sum.bce,
y = sumdatesdf$sum.probability),
start = list(a = 0, b = 0))
est <- predict(fit, list(x = sumdatesdf$sum.bce))
predgrid <- data.frame(bce = sumdatesdf$sum.bce, prob_dens = est)
# Inspect SPD and fitted model
shoredate_sumplot(sumdates)  +
geom_line(data = predgrid, aes(x = bce, y = prob_dens)) +
scale_x_continuous(breaks = seq(-10000, 2500, 1000)) +
theme_classic()
# Find density of site across polygons
incpolys$dens <- lengths(st_intersects(incpolys, sites)) /
sum(lengths(st_intersects(incpolys, sites)))
# Sample size
ssize = sumdates$dates_n
# Number of simulations
nsim <- 10
# Data frame for simulated dates
random_dates <- data.frame(matrix(nrow = ssize*nsim, ncol = 3))
names(random_dates) <- c("sample", "simn", "displacement_curve")
random_dates$sample = sample(predgrid$bce, replace = TRUE,
size = ssize*nsim, prob = predgrid$prob_dens)
random_dates$simn <- rep(1:nsim, each = nrow(random_dates)/nsim)
random_dates$displacement_curve <- incpolys[sample(incpolys$id, replace = TRUE,
size = ssize*nsim,
prob = incpolys$dens),]$disp[[1]]
# Reverse shoreline date using reverse_shoredate from 03_functions.R
random_dates$reverse_elevation <- mapply(reverse_shoredate,
random_dates$sample,
random_dates$displacement_curve,
step_reso)
simdates <- list()
start_time <- Sys.time()
for (i in 1:nrow(random_dates)){
print(paste(i, "/", nrow(random_dates)))
simdates[[i]] <- shoredate::shoreline_date(
site = random_dates$simn[i],
elev_reso = step_reso,
cal_reso = 5,
elevation = random_dates$reverse_elevation[i],
interpolated_curve = random_dates$displacement_curve[i],
sparse = TRUE)
if(i %% ssize == 0){
# Save data externally and overwrite simdates for memory purposes
tmp <- bind_rows(simdates) %>% group_by(bce, site_name) %>%
filter(!is.na(probability)) %>%
summarise(prob_sum = sum(probability))
save(tmp,
file = paste0(here::here("../external_data/shorespd/exp/"),
i, "shore.rds"))
simdates <- list()
}
}
end_time <- Sys.time()
end_time - start_time
random_dates$simn[i]
random_dates$displacement_curve[i]
random_dates$reverse_elevation[i]
plot(random_dates$simn, random_dates$reverse_elevation)
plot(random_dates$reverse_elevation)
hist(random_dates$reverse_elevation)
remove.packages("shoredate")
devtools::install_github("isakro/shoredate")
library(shoredate)
simdates <- list()
start_time <- Sys.time()
for (i in 1:nrow(random_dates)){
print(paste(i, "/", nrow(random_dates)))
simdates[[i]] <- shoredate::shoreline_date(
site = random_dates$simn[i],
elev_reso = step_reso,
cal_reso = 5,
elevation = random_dates$reverse_elevation[i],
interpolated_curve = random_dates$displacement_curve[i],
sparse = TRUE)
if(i %% ssize == 0){
# Save data externally and overwrite simdates for memory purposes
tmp <- bind_rows(simdates) %>% group_by(bce, site_name) %>%
filter(!is.na(probability)) %>%
summarise(prob_sum = sum(probability))
save(tmp,
file = paste0(here::here("../external_data/shorespd/exp/"),
i, "shore.rds"))
simdates <- list()
}
}
end_time <- Sys.time()
end_time - start_time
random_dates$simn[i]
random_dates$reverse_elevation[i]
remove.packages("shoredate")
devtools::install_github("isakro/shoredate")
library(ggplot2)
library(shoredate)
library(here)
# Source functions
source(here("R/03_functions.R"))
# Load polygons with displacement curves
load(here("analysis/data/derived_data/displacement_polygons.RData"))
# Load shoreline dates
load(here("analysis/data/derived_data/sdates.RData"))
# Sum the probability distributions for the shoreline dates
sumdates <- sum_shoredates(shorelinedates)
# Make the results a data frame
sumdatesdf <- as.data.frame(sumdates)
# Fit exponential model
fit <- nls(y ~ (exp(a + b * x)),
data = data.frame(x = sumdatesdf$sum.bce,
y = sumdatesdf$sum.probability),
start = list(a = 0, b = 0))
est <- predict(fit, list(x = sumdatesdf$sum.bce))
predgrid <- data.frame(bce = sumdatesdf$sum.bce, prob_dens = est)
# Inspect SPD and fitted model
shoredate_sumplot(sumdates)  +
geom_line(data = predgrid, aes(x = bce, y = prob_dens)) +
scale_x_continuous(breaks = seq(-10000, 2500, 1000)) +
theme_classic()
# Find density of site across polygons
incpolys$dens <- lengths(st_intersects(incpolys, sites)) /
sum(lengths(st_intersects(incpolys, sites)))
# Sample size
ssize = sumdates$dates_n
# Number of simulations
nsim <- 10
# Data frame for simulated dates
random_dates <- data.frame(matrix(nrow = ssize*nsim, ncol = 3))
names(random_dates) <- c("sample", "simn", "displacement_curve")
random_dates$sample = sample(predgrid$bce, replace = TRUE,
size = ssize*nsim, prob = predgrid$prob_dens)
random_dates$simn <- rep(1:nsim, each = nrow(random_dates)/nsim)
random_dates$displacement_curve <- incpolys[sample(incpolys$id, replace = TRUE,
size = ssize*nsim,
prob = incpolys$dens),]$disp[[1]]
# Reverse shoreline date using reverse_shoredate from 03_functions.R
random_dates$reverse_elevation <- mapply(reverse_shoredate,
random_dates$sample,
random_dates$displacement_curve,
step_reso)
###### Shoreline dating ######
step_reso = 0.1
# Reverse shoreline date using reverse_shoredate from 03_functions.R
random_dates$reverse_elevation <- mapply(reverse_shoredate,
random_dates$sample,
random_dates$displacement_curve,
step_reso)
simdates <- list()
start_time <- Sys.time()
for (i in 1:nrow(random_dates)){
print(paste(i, "/", nrow(random_dates)))
simdates[[i]] <- shoredate::shoreline_date(
site = random_dates$simn[i],
elev_reso = step_reso,
cal_reso = 5,
elevation = random_dates$reverse_elevation[i],
interpolated_curve = random_dates$displacement_curve[i],
sparse = TRUE)
if(i %% ssize == 0){
# Save data externally and overwrite simdates for memory purposes
tmp <- bind_rows(simdates) %>% group_by(bce, site_name) %>%
filter(!is.na(probability)) %>%
summarise(prob_sum = sum(probability))
save(tmp,
file = paste0(here::here("../external_data/shorespd/exp/"),
i, "shore.rds"))
simdates <- list()
}
}
simdates
simdates[[1]]
shoredate::shoreline_date(
site = random_dates$simn,
elev_reso = step_reso,
cal_reso = 5,
elevation = random_dates$reverse_elevation,
interpolated_curve = random_dates$displacement_curve,
sparse = TRUE)
simdates[[1]][[1]]
plot(simdates[[1]][[1]]$bce, simdates[[1]][[1]]$probability)
plot(simdates[[1]][[1]][[1]]$bce, simdates[[1]][[1]][[1]]$probability)
plot(simdates[[1]][[1]][[1]]$bce, simdates[[1]][[1]][[1]]$probability, type = "line")
i = 2
shoredate::shoreline_date(
site = random_dates$simn[i],
elev_reso = step_reso,
cal_reso = 5,
elevation = random_dates$reverse_elevation[i],
interpolated_curve = random_dates$displacement_curve[i],
sparse = TRUE)
random_dates$simn[i]
i = 2
random_dates$simn[i]
step_reso
random_dates$reverse_elevation[i]
random_dates
View(random_dates)
sample(predgrid$bce, replace = TRUE,
size = ssize*nsim, prob = predgrid$prob_dens)
